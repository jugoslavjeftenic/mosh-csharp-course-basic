WEBVTT

00:00:03.750 --> 00:00:07.740
OK before we understand what C-L our age is and why we need it.

00:00:07.740 --> 00:00:12.080
Let me explain a little bit about the history of C-Sharp before C-sharp.

00:00:12.180 --> 00:00:19.300
We had two languages in the C family the C language and C++ with either of these languages.

00:00:19.350 --> 00:00:26.340
When we compiled our application the compiler translated our code into the native code for the machine

00:00:26.460 --> 00:00:27.930
on which it was running.

00:00:28.260 --> 00:00:36.510
Which means if I wrote an application in C++ on a Windows machine with 80 86 processor architecture

00:00:36.870 --> 00:00:42.020
the compiler would translate my code into the native code for that machine.

00:00:42.090 --> 00:00:45.870
That is a Windows machine with an 88 or six processor.

00:00:45.870 --> 00:00:47.410
Now we know we have different hardware.

00:00:47.520 --> 00:00:49.640
And we have different operating systems.

00:00:50.070 --> 00:00:56.010
So if I took an application that compiled the application on the computer with a different architecture

00:00:56.430 --> 00:00:58.280
that would not run.

00:00:58.320 --> 00:01:04.020
So when Microsoft was designing the C-sharp language on the Dathan framework they came up with an idea

00:01:04.020 --> 00:01:08.890
that they borrowed from the Java community in Java when the computer code.

00:01:09.030 --> 00:01:12.190
It's not translated directly into the machine code.

00:01:12.510 --> 00:01:17.970
It's translated into an intermediate language called bytecode and we have the exact same concept in

00:01:17.970 --> 00:01:18.970
C-sharp.

00:01:18.990 --> 00:01:26.100
So when you compile your C-Sharp code the result is what we call i l or intermediate language code is

00:01:26.130 --> 00:01:29.550
independent of the computer on which it's running.

00:01:29.700 --> 00:01:36.900
Now we need something that would translate that code into the native code or the machine that is running

00:01:36.900 --> 00:01:37.900
the application.

00:01:38.310 --> 00:01:45.480
And that is the job of C-L our Common Language Runtime So solar is essentially an application that is

00:01:45.480 --> 00:01:51.770
sitting in the memory whose job is to translate the code into the machine code.

00:01:52.050 --> 00:01:57.510
And this process is called just in time compiler action or JIT.

00:01:57.540 --> 00:02:02.340
So with this architecture you can write an application in C-sharp and you don't have to worry about

00:02:02.340 --> 00:02:06.020
compiling that into the native code for different machines.

00:02:06.300 --> 00:02:09.900
As long as a machine has C-L our bath can run your application