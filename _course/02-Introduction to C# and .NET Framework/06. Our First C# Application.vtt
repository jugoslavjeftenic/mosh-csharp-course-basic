WEBVTT

00:00:03.600 --> 00:00:09.290
OK in this video we're going to have a quick tour of Visual Studio and build a very simple C-Sharp application

00:00:09.290 --> 00:00:10.000
.

00:00:10.050 --> 00:00:12.190
So here I've got a visual studio open.

00:00:12.570 --> 00:00:17.090
Let's go to a file new project.

00:00:18.390 --> 00:00:23.700
OK and this dialog on the left side we've got a section called templates and here you see the kind of

00:00:23.700 --> 00:00:27.130
applications we can build with C-sharp.

00:00:27.300 --> 00:00:33.570
So as you see in the list we can build desktop applications web applications apps for cloud more biol

00:00:33.780 --> 00:00:36.960
services workflows and various kind of things.

00:00:37.080 --> 00:00:42.660
But in this course and the subsequent parts of this course we're just going to focus on console applications

00:00:43.720 --> 00:00:49.730
a console application is a very simple application that does not have a graphical user interface and

00:00:49.740 --> 00:00:52.270
it's a great learning tool for learning a new language.

00:00:52.350 --> 00:00:57.390
So we're not going to be distracted by various complexities of larger applications.

00:00:57.420 --> 00:01:05.820
So on the left side select Windows and on the right side select console application then give a name

00:01:05.820 --> 00:01:06.740
to the project.

00:01:06.840 --> 00:01:13.150
So let's call it hello world which is a common tradition when learning a new language and specify a

00:01:13.170 --> 00:01:14.480
location.

00:01:14.610 --> 00:01:16.400
We can put it wherever you want.

00:01:16.520 --> 00:01:22.710
I know this concept of solution in visual studio we have this concept of solution which can have one

00:01:22.710 --> 00:01:25.980
or more projects with a very simple application.

00:01:25.980 --> 00:01:31.980
You have only one solution and one project but as your application grows you add more projects each

00:01:31.980 --> 00:01:34.330
responsible for something different.

00:01:34.370 --> 00:01:38.560
No we don't have to worry about it now click OK.

00:01:39.720 --> 00:01:42.400
All right let's see what's happening here.

00:01:42.480 --> 00:01:47.280
Some developers get a little bit intimidated the first time they open Visual Studio and that's fair

00:01:47.280 --> 00:01:51.800
enough because there are so many menus and panels here that it's a bit confusing.

00:01:52.020 --> 00:01:53.260
But let me tell you something.

00:01:53.460 --> 00:01:57.740
Ninety percent of the time you're going to use only 10 percent of these or even less.

00:01:57.840 --> 00:02:00.000
So don't worry about all these menus here.

00:02:00.180 --> 00:02:03.270
You don't need to use all of them at all times.

00:02:03.360 --> 00:02:04.740
Ninety percent of the time.

00:02:04.740 --> 00:02:10.740
All you need is the code editor here and sometimes you need the solution explorer.

00:02:10.740 --> 00:02:15.560
In fact I personally hardly ever use solution explorer because I do everything with my keyboard.

00:02:15.720 --> 00:02:20.630
And if you watch my course double your coding speed you will see that everything is possible with keyboard

00:02:20.630 --> 00:02:20.800
.

00:02:20.880 --> 00:02:22.560
So you don't need these panels here.

00:02:22.650 --> 00:02:25.230
You don't need to grab your mouse and navigate around.

00:02:25.230 --> 00:02:28.020
You don't really need the stuff.

00:02:28.320 --> 00:02:31.210
Also none of the stuff on the toolbar are ever required.

00:02:31.230 --> 00:02:32.030
Don't worry about it.

00:02:32.130 --> 00:02:35.190
Everything you can do with your keyboard.

00:02:35.190 --> 00:02:35.390
All right.

00:02:35.400 --> 00:02:41.100
Now let's take a look at this first our program so we created a console application and on the right

00:02:41.100 --> 00:02:48.870
side you see the solution explorer panel in case you don't see that go to view and select solution explorer

00:02:48.870 --> 00:02:49.940
.

00:02:50.070 --> 00:02:55.530
So the talk you see we have a solution which has only one project I know that we've got the project

00:02:55.530 --> 00:02:57.210
called Hello world.

00:02:57.210 --> 00:02:59.350
Look at this four items here.

00:02:59.370 --> 00:03:04.620
Properties expand that we have a file here called assembly info.

00:03:04.620 --> 00:03:10.590
This is the identification for the assembly that will be produced as a result of compiling this application

00:03:10.590 --> 00:03:11.120
.

00:03:11.130 --> 00:03:14.190
So when we compile a console application we're going to get an executable.

00:03:14.340 --> 00:03:18.000
And that's an assembly that assembly has an identification.

00:03:18.000 --> 00:03:19.670
Look at these attributes here.

00:03:20.040 --> 00:03:24.270
Like the title description which is currently not set.

00:03:24.540 --> 00:03:31.620
Company product copyright trademark culture a great you know various kind of things like even version

00:03:31.620 --> 00:03:31.820
.

00:03:31.830 --> 00:03:38.730
So these are all part of assembly identification or assembly manifest in most cases you don't have to

00:03:38.730 --> 00:03:43.710
worry about it but if you want to create an assembly and you want to distribute it send to other people

00:03:43.720 --> 00:03:43.890
.

00:03:44.160 --> 00:03:48.330
Then you may want to come here and give it a proper name and a proper version.

00:03:48.330 --> 00:03:56.850
So for now we don't have to worry about it under references references you see any assemblies that this

00:03:56.850 --> 00:04:00.010
project is referencing to do its job.

00:04:00.300 --> 00:04:06.000
When you create a project with visual studio by default it as a reference to a bunch of assemblies that

00:04:06.000 --> 00:04:09.390
you see here these are all part of Dot Net framework.

00:04:09.840 --> 00:04:15.630
So at a minimum Visual Studio assumes you're going to use classes in system assembly or system that

00:04:15.630 --> 00:04:19.050
data to work with databases and so on.

00:04:19.080 --> 00:04:23.040
You may not necessarily use all these assemblers in your project but that's just part of the template

00:04:23.120 --> 00:04:25.370
.

00:04:25.710 --> 00:04:30.900
After the config is an X amount where we store the conflagration for this application.

00:04:30.900 --> 00:04:35.940
Sometimes you may want to store connection strings through the database or you may want to have some

00:04:35.940 --> 00:04:38.240
settings about your application.

00:04:38.400 --> 00:04:40.590
All of them will end up here.

00:04:40.650 --> 00:04:46.190
And finally you see program the C-s which is where we're going to start writing code.

00:04:47.040 --> 00:04:49.030
All right let's see what's happening here.

00:04:49.050 --> 00:04:54.400
So in this file program that's yes on the top you see a bunch of using statements.

00:04:54.560 --> 00:04:55.600
What is this all about.

00:04:55.800 --> 00:04:58.860
Well our project is called the hello world.

00:04:58.860 --> 00:05:05.730
So by default visual studio creates a namespace called Hello world when you write code in this namespace

00:05:05.910 --> 00:05:09.510
we have access to any classes defined in this namespace.

00:05:09.630 --> 00:05:15.090
So if we want to use a class that is defined in a different namespace we need to import it in our code

00:05:15.090 --> 00:05:15.690
file.

00:05:15.840 --> 00:05:18.280
And that's why we use the using statement.

00:05:18.430 --> 00:05:25.950
So by default Visual Studio as it's five using statements system is a namespace a Dot Net Framework

00:05:26.280 --> 00:05:33.090
and that's where we have all these basic utility classes and primitive types typewriter system that

00:05:33.090 --> 00:05:40.380
collections that generic is used to work with lists collections and so on system that link is used to

00:05:40.380 --> 00:05:41.430
work with data.

00:05:41.910 --> 00:05:47.640
And it's a comprehensive topic that I have covered in my C-Sharp And of course system the text is used

00:05:47.640 --> 00:05:50.770
to work with text and coding and stuff like that.

00:05:51.030 --> 00:05:56.940
And finally system the threading is used to build multithreaded applications in this video we're going

00:05:56.940 --> 00:06:03.730
to create a very simple application and we're not going to use any of these four name spaces here so

00:06:03.810 --> 00:06:06.600
we're just going to use system for now.

00:06:06.600 --> 00:06:09.980
I leave them there and then I'll show you how to clean them up.

00:06:10.000 --> 00:06:13.370
All right so here's our namespace and inside them space.

00:06:13.380 --> 00:06:19.260
By default we have a class called program so every console application you create with Visual Studio

00:06:19.410 --> 00:06:23.250
has a class called program Inside program by default.

00:06:23.250 --> 00:06:29.470
We have a method or a function called Main and that's the entry point to the application.

00:06:29.520 --> 00:06:35.520
So when you run your application C-L or executes the code inside main method and that's where everything

00:06:35.520 --> 00:06:39.710
kicks off this method is declared as static.

00:06:39.720 --> 00:06:43.940
And that's something I'm going to cover later in the next section.

00:06:44.110 --> 00:06:46.450
Methods have input and output.

00:06:46.500 --> 00:06:52.160
So what goes inside parentheses the input to the method which we call parameter or argument.

00:06:52.400 --> 00:06:54.370
Know that parameters are optional.

00:06:54.490 --> 00:07:00.660
But in this case the default template the main method has a parameter called args which is of type String

00:07:00.690 --> 00:07:01.410
Array.

00:07:01.440 --> 00:07:04.920
We're going to learn about String Array in the next section.

00:07:04.950 --> 00:07:10.920
What do you see before the method name is the return type or the output of the method void in C Sharp

00:07:10.920 --> 00:07:12.080
means nothing.

00:07:12.150 --> 00:07:15.320
That means this method does not return any value.

00:07:15.660 --> 00:07:18.590
It just contains some code that's it.

00:07:18.610 --> 00:07:25.740
Also note that C sharp is a case sensitive language so this main has to be with capital M otherwise

00:07:25.750 --> 00:07:30.200
C-L R is not going to find this method as the entry point of the application.

00:07:30.620 --> 00:07:36.580
Okay and one last thing is not this curly braces so we're half a block of code.

00:07:36.730 --> 00:07:44.710
We need to surround it with curly braces so that is applicable for methods for classes and for name

00:07:44.710 --> 00:07:46.660
spaces.

00:07:46.830 --> 00:07:50.070
Right now most write a very simple program.

00:07:50.340 --> 00:07:51.960
So let's go here.

00:07:52.560 --> 00:08:00.290
We have a class called Konsole which is used to read data from console or write data to it.

00:08:00.330 --> 00:08:06.390
It has a bunch of methods we can access this Smethurst using the dot notation.

00:08:06.390 --> 00:08:10.380
And here you see various members of this class.

00:08:10.680 --> 00:08:13.160
Methods are indicated by a purple cube.

00:08:13.360 --> 00:08:16.610
So beep is used to play a beep sound.

00:08:16.790 --> 00:08:19.210
All clear is used to clear the console.

00:08:19.250 --> 00:08:23.200
We get to use the right line method.

00:08:23.280 --> 00:08:26.350
This method can optionally take a parameter.

00:08:26.880 --> 00:08:29.030
So I'm going to pass a string here.

00:08:29.500 --> 00:08:31.240
Hello world.

00:08:31.450 --> 00:08:38.020
Just that I know that statements in C# terminate with a semicolon as you see here.

00:08:38.080 --> 00:08:42.110
Now take a look at using system on the top.

00:08:42.370 --> 00:08:46.470
Do you see that it's highlighted where as the others are greyed out.

00:08:46.480 --> 00:08:52.270
The reason for that is in this file we are using a class called Konsole which is defined in the system

00:08:52.260 --> 00:08:53.360
namespace.

00:08:53.380 --> 00:08:56.510
That's why that using statement is active.

00:08:56.620 --> 00:09:03.540
We are not using any classes defined in other names spaces and that's why they're great out so we can

00:09:03.540 --> 00:09:05.980
get rid of them to make our code cleaner.

00:09:06.120 --> 00:09:10.720
We can delete each one by control X like that.

00:09:11.430 --> 00:09:17.490
Or if you're using resharpen we can't get rid of all of them by pressing alt and enter here and selecting

00:09:17.500 --> 00:09:23.310
the first option which is remove unused directives in file so it's faster.

00:09:23.320 --> 00:09:28.960
Now let's run the application with control and F5.

00:09:30.930 --> 00:09:36.450
So this we know that you see here this black window is what we call console and that's why this kind

00:09:36.450 --> 00:09:40.980
of project is called console application.

00:09:41.770 --> 00:09:43.530
OK that's it for this lecture.

00:09:43.680 --> 00:09:47.950
From this point in every lecture we are going to learn something new about C-Sharp and we can write

00:09:47.940 --> 00:09:50.310
more interesting more complex programs.

00:09:50.320 --> 00:09:52.280
I hope you enjoy this lecture and thank you for watching