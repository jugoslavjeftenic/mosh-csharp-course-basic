WEBVTT

00:00:03.420 --> 00:00:09.680
OK now let's learn about the architecture of talking about applications at a very high level.

00:00:09.720 --> 00:00:15.600
When you build an application with C-Sharp your application consists of building blocks called classes

00:00:15.620 --> 00:00:16.320
.

00:00:17.040 --> 00:00:20.090
These classes collaborate with each other at runtime.

00:00:20.190 --> 00:00:24.620
And as a result the application provides some functionality.

00:00:24.630 --> 00:00:32.430
Now what is a class A class is a container that has some data which is also called attributes and functions

00:00:32.460 --> 00:00:37.550
which is also called methods functions or methods have behavior.

00:00:37.860 --> 00:00:39.170
They execute code.

00:00:39.240 --> 00:00:44.940
They do things for us data represents the state of the application.

00:00:44.940 --> 00:00:46.570
Let me use an example.

00:00:46.890 --> 00:00:53.790
Think of a car a car has some attributes like its make its model its color.

00:00:53.820 --> 00:00:56.830
These are the attributes of a car.

00:00:57.100 --> 00:00:59.310
The car also has some functions.

00:00:59.490 --> 00:01:07.200
We can start it or we can move it so you can think of a car as a class in a real world application.

00:01:07.200 --> 00:01:13.920
We have tens hundreds or even thousands of classes each class responsible for a piece of functionality

00:01:13.920 --> 00:01:14.570
.

00:01:14.820 --> 00:01:20.910
An example of that is classes that are responsible for getting the data from the user process the data

00:01:21.180 --> 00:01:24.120
and display something to the user.

00:01:24.240 --> 00:01:30.600
Now as the number of classes in an application grows we need a way to organize these classes.

00:01:30.600 --> 00:01:33.040
Thats where we use a namespace.

00:01:33.270 --> 00:01:37.290
So a namespace is a container for related classes.

00:01:37.380 --> 00:01:43.910
For example in dotnet framework we have name spaces each containing tens of related classes.

00:01:44.280 --> 00:01:48.420
We have name spaces for working with data like databases.

00:01:48.420 --> 00:01:52.090
We also have name spaces for working with graphics and images.

00:01:52.440 --> 00:01:58.860
We have name spaces for working with security now in real world application as these name spaces grow

00:01:58.860 --> 00:01:59.010
.

00:01:59.010 --> 00:02:06.360
We need a different way of partitioning an application and thats where we use an assembly and assembly

00:02:06.660 --> 00:02:10.400
is a container for related name spaces.

00:02:10.560 --> 00:02:19.350
Physically its a file on the disk which can either be an executable or a DL L which stands for dynamically

00:02:19.470 --> 00:02:21.900
linked library.

00:02:21.900 --> 00:02:28.590
So when you compile an application the compiler builds one or more assemblies depending on how you partition

00:02:28.590 --> 00:02:30.840
your code in the next picture.

00:02:30.850 --> 00:02:36.000
We can write a very simple SUCIA application and you're going to see all these concepts and action