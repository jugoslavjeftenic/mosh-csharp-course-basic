WEBVTT

00:00:03.140 --> 00:00:13.500
OK we go to operators and C-Sharp we have five types of operators arithmetic comparison assignment logical

00:00:13.770 --> 00:00:14.910
and bitwise.

00:00:15.300 --> 00:00:19.500
Let's take a closer look at each of these operators.

00:00:19.500 --> 00:00:24.660
We use arithmetic operators in computations where we are working with numbers.

00:00:24.720 --> 00:00:33.110
So as you see in the slide we have add subtract multiply divide and remainder of division.

00:00:33.660 --> 00:00:40.410
We also have 2 arithmetic operators called increment and decrement which are shortcuts or adding one

00:00:40.470 --> 00:00:43.970
or subtracting one from a variable.

00:00:44.100 --> 00:00:49.680
So A-plus plus is equivalent to a equals a plus one.

00:00:49.680 --> 00:00:54.260
Now with this increment and decrement operator there are two ways you can apply them.

00:00:54.600 --> 00:00:56.370
You can use them as a postfix.

00:00:56.700 --> 00:00:59.570
So in this example a use one.

00:00:59.670 --> 00:01:07.170
And when we apply the postfix increment operator first the value of a is assigned to be so so is going

00:01:07.170 --> 00:01:11.990
to be 1 and then 8 is incremented by 1.

00:01:12.000 --> 00:01:19.470
So in this example after the second line is execute it is going to be 2 and B is going to be 1.

00:01:19.470 --> 00:01:25.400
Now let's take a look at a different way of applying increment operator as a prefix.

00:01:25.410 --> 00:01:34.170
So in this example and the second line first is incremented by 1 and then it's assigned to be.

00:01:34.170 --> 00:01:38.180
So after the second line both A and B are going to be 2.

00:01:38.640 --> 00:01:42.240
So be aware of this difference.

00:01:42.260 --> 00:01:44.730
OK next comparison operators.

00:01:45.150 --> 00:01:53.580
So we got equal which is indicated by double equal sign not equal greater than greater than or equal

00:01:53.580 --> 00:01:57.860
to less than and less than or equal to.

00:01:57.930 --> 00:02:03.540
Now what I want you to pay attention to in this list is that the testing for equality is accomplished

00:02:03.540 --> 00:02:05.650
by double equal sign.

00:02:05.940 --> 00:02:13.110
And that's different from a single equal which is the assignment operator next assignment operators

00:02:13.110 --> 00:02:13.900
.

00:02:13.920 --> 00:02:17.690
So the most commonly used is the one with a single equal sign.

00:02:17.700 --> 00:02:19.710
So here we said eight to one.

00:02:19.860 --> 00:02:21.410
Pretty basic.

00:02:21.450 --> 00:02:28.200
Now look at the next four types of assignment operators addition assignment subtraction assignment multiplication

00:02:28.200 --> 00:02:31.290
assignment and division assignment.

00:02:31.290 --> 00:02:32.910
Let's see how they work.

00:02:32.940 --> 00:02:39.960
For example addition assignment a plus equal three means add three to eight.

00:02:40.050 --> 00:02:47.340
So it's equivalent to writing a equals a plus three and the same rule applies to other for assignment

00:02:47.340 --> 00:02:55.770
operators logical operators are used in Boolean expressions which are often used in conditional statements

00:02:56.290 --> 00:02:59.790
will get to conditional statements later in this course.

00:02:59.790 --> 00:03:06.310
So a real world example is where you have a condition and you want to make sure that condition and another

00:03:06.330 --> 00:03:08.220
condition both are true.

00:03:08.280 --> 00:03:10.050
Or maybe one of them is true.

00:03:10.530 --> 00:03:18.030
So that's where you use a logical operator in C Sharp the logical and is indicated by double ampersand

00:03:18.450 --> 00:03:22.640
and the logical or is implemented by double vertical line.

00:03:23.250 --> 00:03:28.500
We also have the not operator which is indicated by an exclamation mark.

00:03:28.710 --> 00:03:35.310
And finally here we've got the bitwise operators bitwise operators are often used in low level programming

00:03:35.880 --> 00:03:43.560
like when working with Windows API or in sockets or encryption explanation of these is beyond the scope

00:03:43.560 --> 00:03:44.570
of this course.

00:03:44.700 --> 00:03:48.150
But if you're interested let me know and I write a blog post for you.

00:03:48.270 --> 00:03:54.900
Now what I want you to take away here is that the bitwise and is indicated by a single ampersand whereas

00:03:54.900 --> 00:04:00.710
the logical end which we use in conditional statements is indicated by double ampersand.

00:04:00.840 --> 00:04:02.170
Same for bitwise OR.

00:04:02.280 --> 00:04:03.990
And logical or.

00:04:03.990 --> 00:04:06.090
So remember the difference.

00:04:06.090 --> 00:04:10.780
OK in theory let's flip over to Visual Studio and see all these concepts in action